{"remainingRequest":"/home/runner/work/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/node_modules/thread-loader/dist/cjs.js!/home/runner/work/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/node_modules/babel-loader/lib/index.js!/home/runner/work/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/runner/work/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/src/pages/Tema3.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/runner/work/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/src/pages/Tema3.vue","mtime":1734974319560},{"path":"/home/runner/work/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/babel.config.js","mtime":1734974319494},{"path":"/home/runner/work/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/CF4_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdUZW1hMycsCiAgZGF0YTogKCkgPT4gKHsKICAgIC8vIHZhcmlhYmxlcyBkZSB2dWUKICB9KSwKICBtb3VudGVkKCkgewogICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICB0aGlzLiRhb3NSZWZyZXNoKCk7CiAgICB9KTsKICB9LAogIHVwZGF0ZWQoKSB7CiAgICB0aGlzLiRhb3NSZWZyZXNoKCk7CiAgfQp9Ow=="},{"version":3,"names":["name","data","mounted","$nextTick","$aosRefresh","updated"],"sources":["src/pages/Tema3.vue"],"sourcesContent":["<template lang=\"pug\">\n.curso-main-container.pb-3\n  BannerInterno\n  .container.tarjeta.tarjeta--blanca.p-4.p-md-5.mb-5\n    .titulo-principal.color-acento-contenido(data-aos=\"flip-up\")\n      .titulo-principal__numero\n        span 3\n      h1 Control de versiones y desarrollo colaborativo\n    \n    .row\n      .col-md-auto.d-none.d-md-block(style=\"place-self:center;\" data-aos=\"fade-right\")\n        figure\n          img(src=\"@/assets/curso/tema3/1.svg\")\n      .col-md(style=\"place-self:center;\" data-aos=\"fade-left\")\n        p.mb-0 El control de versiones es una parte fundamental del desarrollo de #[em software] moderno, permitiendo a los equipos trabajar de manera eficiente y coordinada en proyectos complejos. Este capítulo explora las herramientas y prácticas que hacen posible el desarrollo colaborativo, con especial énfasis en Git, el sistema de control de versiones más utilizado en la actualidad.\n    \n    Separador\n\n    .titulo-segundo(data-aos=\"flip-up\")\n      h2#t_3_1 3.1 Fundamentos de Git\n    \n    .row\n      .col-lg(data-aos=\"fade-right\")\n        p Git es un sistema de control de versiones distribuido que permite realizar un seguimiento de los cambios en el código fuente durante el desarrollo de #[em software]. A diferencia de los sistemas centralizados anteriores, Git proporciona a cada desarrollador una copia completa del repositorio, lo que permite trabajar de manera offline y realizar operaciones de manera más eficiente.\n        .p-4.mt-4(style=\"background-color:#E6F0FC;border-radius:7px;\")\n          .row\n            .col-md-auto.d-none.d-md-block(style=\"place-self:center;\")\n              figure\n                img(src=\"@/assets/curso/tema3/2.svg\")\n            .col-md(style=\"place-self:center;\")\n              p.mb-0 Los conceptos fundamentales de Git incluyen el área de trabajo (#[em working directory]), el área de preparación (#[em staging area]) y el repositorio local. Cada uno de estos espacios cumple un papel específico en el flujo de trabajo de Git:\n      .col-lg-auto.d-none.d-lg-block(data-aos=\"fade-left\")\n        figure\n          img(src=\"@/assets/curso/tema3/3.png\")\n    \n    .col-xl-10.m-auto.mt-5\n      .titulo-sexto.color-acento-contenido(data-aos=\"fade-down\")\n        h5 Tabla 2.\n        span Espacios de trabajo en Git y sus características principales\n      .tabla-a.color-acento-contenido(data-aos=\"fade-up\")\n        table\n          caption.mt-3.fw-normal #[strong Fuente:] OIT, 2024.\n          thead(style=\"border:0;\")\n            tr.text-center(style=\"background-color:#13DE61;\")\n              th(style=\"border:0;border-right:1px #AFAFAF solid;\") Espacio\n              th(style=\"border:0;border-right:1px #AFAFAF solid;\") Descripción\t\n              th(style=\"border:0;border-right:1px #AFAFAF solid;\") Comandos principales\n              th(style=\"border:0;\") Uso típico\n          tbody.text-center\n            tr(style=\"background-color:#F6F6F6;\")\n              td(style=\"border:0;border-right:1px #AFAFAF solid;\") #[em Working Directory]\n              td(style=\"border:0;border-right:1px #AFAFAF solid;\") Directorio actual donde se realizan los cambios\n              td(style=\"border:0;border-right:1px #AFAFAF solid;\") git status, git add\n              td(style=\"border:0;\") Desarrollo activo\n            tr(style=\"background-color:#FFF;\")\n              td(style=\"border:0;border-right:1px #AFAFAF solid;\") #[em Staging Area]\n              td(style=\"border:0;border-right:1px #AFAFAF solid;\") Área intermedia donde se preparan los cambios\n              td(style=\"border:0;border-right:1px #AFAFAF solid;\") git add, git reset\n              td(style=\"border:0;\") #[em Revisión pre-commit]\n            tr(style=\"background-color:#F6F6F6;\")\n              td(style=\"border:0;border-right:1px #AFAFAF solid;\") #[em Local Repository]\n              td(style=\"border:0;border-right:1px #AFAFAF solid;\") Almacén de todos los #[em commits] realizados\n              td(style=\"border:0;border-right:1px #AFAFAF solid;\") git commit, git log\n              td(style=\"border:0;\") Historial de cambios\n            tr(style=\"background-color:#FFF;\")\n              td(style=\"border:0;border-right:1px #AFAFAF solid;\") #[em Remote Repository]\n              td(style=\"border:0;border-right:1px #AFAFAF solid;\") Copia compartida en un servidor\n              td(style=\"border:0;border-right:1px #AFAFAF solid;\") git push, git pull\n              td(style=\"border:0;\") Colaboración\n    \n    Separador\n\n    .titulo-segundo(data-aos=\"flip-up\")\n      h2#t_3_2 3.2 Flujos de trabajo con repositorios\n    \n    .row\n      .col-lg(data-aos=\"fade-right\")\n        p Los flujos de trabajo en Git definen cómo los equipos organizan sus procesos de desarrollo y colaboración. El flujo de trabajo más común es Git Flow, que establece una estructura clara para el manejo de características, correcciones y releases. Sin embargo, existen otros modelos como GitHub Flow o GitLab Flow, cada uno adaptado a diferentes necesidades y contextos de desarrollo.\n        .p-4.mt-4(style=\"background-color:#E6F0FC;border-radius:7px;\")\n          .row\n            .col-md-auto.d-none.d-md-block(style=\"place-self:center;\")\n              figure\n                img(src=\"@/assets/curso/tema3/4.svg\")\n            .col-md(style=\"place-self:center;\")\n              p Un flujo de trabajo típico involucra los siguientes pasos:\n              ul.lista-ul.mb-0\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color:#1169E3;\")\n                  span #[strong Crear] una rama para una nueva característica.\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color:#1169E3;\")\n                  span #[strong Realizar] cambios y commits locales.\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color:#1169E3;\")\n                  span #[strong Publicar] la rama en el repositorio remoto.\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color:#1169E3;\")\n                  span #[strong Crear] un #[em pull request] para revisión.\n                li.d-flex.mb-0\n                  i.fas.fa-check-circle(style=\"color:#1169E3;\")\n                  span #[strong Fusionar] los cambios aprobados en la rama principal.\n      .col-lg-auto.d-none.d-lg-block(data-aos=\"fade-left\")\n        figure\n          img(src=\"@/assets/curso/tema3/5.png\")\n    \n    Separador\n\n    .titulo-segundo(data-aos=\"flip-up\")\n      h2#t_3_3 3.3 #[em Branching] y #[em merging]\n    \n    .row\n      .col-lg(data-aos=\"fade-right\")\n        p El #[em branching] (ramificación) es una de las características más poderosas de Git, permitiendo a los desarrolladores trabajar en diferentes características o correcciones de manera aislada. Cada rama representa una línea independiente de desarrollo que puede evolucionar sin afectar a las demás.\n        .d-none.d-lg-block\n          figure\n            img(src=\"@/assets/curso/tema3/6.png\")\n      .col-lg.col-md-10.m-auto(data-aos=\"fade-left\")\n        figure\n          img(src=\"@/assets/curso/tema3/7.svg\")\n    \n    Separador\n\n    .titulo-segundo(data-aos=\"flip-up\")\n      h2#t_3_4 3.4 Herramientas colaborativas y gestión de proyectos\n    \n    .row\n      .col-lg(data-aos=\"fade-right\")\n        p El desarrollo moderno de #[em software] requiere más que solo control de versiones. Las herramientas colaborativas complementan a Git proporcionando capacidades adicionales para la gestión de proyectos, revisión de código y comunicación del equipo. Algunas herramientas populares incluyen:\n        .p-4.mt-4(style=\"background-color:#E6F0FC;border-radius:7px;\")\n          .row\n            .col-md-auto.d-none.d-md-block(style=\"place-self:center;\")\n              figure\n                img(src=\"@/assets/curso/tema3/8.svg\")\n            .col-md(style=\"place-self:center;\")\n              ul.lista-ul.mb-0\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color:#1169E3;\")\n                  span Sistemas de gestión de issues (Jira, GitHub Issues).\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color:#1169E3;\")\n                  span Herramientas de revisión de código (GitHub Pull Requests, GitLab Merge Requests).\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color:#1169E3;\")\n                  span Plataformas de documentación colaborativa (Confluence, Wiki).\n                li.d-flex.mb-0\n                  i.fas.fa-check-circle(style=\"color:#1169E3;\")\n                  span Herramientas de comunicación en tiempo real (Slack, Microsoft Teams).\n      .col-lg-auto.d-none.d-lg-block(data-aos=\"fade-left\")\n        figure\n          img(src=\"@/assets/curso/tema3/9.png\")\n    \n    Separador\n\n    .titulo-segundo(data-aos=\"flip-up\")\n      h2#t_3_5 3.5 Integración continua básica\n    \n    .row\n      .col-lg(data-aos=\"fade-right\")\n        p La integración continua (CI) es una práctica de desarrollo que requiere que los desarrolladores integren su código en un repositorio compartido varias veces al día. Cada integración se verifica mediante una construcción automatizada que incluye pruebas, lo que permite detectar errores rápidamente.\n        .p-4.mt-4.mb-4(style=\"background-color:#E6F0FC;border-radius:7px;\")\n          .row\n            .col-md-auto.d-none.d-md-block(style=\"place-self:center;\")\n              figure\n                img(src=\"@/assets/curso/tema3/10.svg\")\n            .col-md(style=\"place-self:center;\")\n              p Los elementos clave de un sistema de CI incluyen:\n              ul.lista-ul.mb-0\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color:#1169E3;\")\n                  span.fw-bold Un repositorio de código centralizado.\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color:#1169E3;\")\n                  span.fw-bold Automatización de la construcción.\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color:#1169E3;\")\n                  span.fw-bold Pruebas automatizadas.\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color:#1169E3;\")\n                  span.fw-bold Un servidor de integración continua.\n                li.d-flex.mb-0\n                  i.fas.fa-check-circle(style=\"color:#1169E3;\")\n                  span.fw-bold Convenciones de trabajo acordadas.\n        .d-none.d-lg-block\n          figure\n            img(src=\"@/assets/curso/tema3/11.png\")\n      .col-lg-auto.col-md-7.m-auto(data-aos=\"fade-left\")\n        .tarjeta.overflow-hidden(style=\"background-color: #110628 \")\n          .p-3.mb-5(style=\"background-color: #3A1D71\")\n            img(src='@/assets/curso/iconos.svg', alt='' style='width: 80px;')\n          pre.p-5.text-white.py-2.mb-4\n            code # Ejemplo de pipeline CI básico\n              |pipeline:\n              |  stages:\n              |    - build\n              |    - test\n              |    - deploy\n\n              |  build:\n              |    script:\n              |      - npm install\n              |      - npm run build\n\n              |  test:\n              |    script:\n              |      - npm run test\n\n              |  deploy:\n              |    script:\n              |      - if [ \"$BRANCH\" = \"main\" ]; then\n              |        npm run deploy\n              |        fi\n        //- figure\n        //-   img(src=\"@/assets/curso/tema3/12.svg\")\n    \n    p.mt-4(data-aos=\"fade-up\") El desarrollo colaborativo exitoso requiere una combinación de herramientas técnicas y prácticas organizacionales efectivas. La adopción de Git y las prácticas modernas de desarrollo colaborativo no solo mejora la calidad del código, sino que también facilita la escalabilidad de los equipos y proyectos.\n\n    .row.mt-4\n      .col-lg(data-aos=\"fade-right\")\n        p En el próximo capítulo, exploraremos las herramientas y entornos de desarrollo que complementan estas prácticas colaborativas y nos ayudan a ser más productivos en nuestro trabajo diario como desarrolladores.\n        .p-4.p-md-3.mt-4(style=\"background-color:#E6F0FC;border-radius:7px;\")\n          .row\n            .col-md-auto.d-none.d-md-block(style=\"place-self:center;\")\n              figure\n                img(src=\"@/assets/curso/tema3/13.svg\")\n            .col-md(style=\"place-self:center;\")\n              p.mb-0 La clave para el éxito en el desarrollo colaborativo no solo radica en el dominio de las herramientas, sino también en la adopción de buenas prácticas de comunicación y coordinación entre los miembros del equipo. La documentación clara, las convenciones de código consistentes y los procesos bien definidos son tan importantes como las herramientas técnicas que utilizamos.\n      .col-lg-auto.d-none.d-lg-block(data-aos=\"fade-left\")\n        figure\n          img(src=\"@/assets/curso/tema3/14.png\")\n\n\n\n\n</template>\n\n<script>\nexport default {\n  name: 'Tema3',\n  data: () => ({\n    // variables de vue\n  }),\n  mounted() {\n    this.$nextTick(() => {\n      this.$aosRefresh()\n    })\n  },\n  updated() {\n    this.$aosRefresh()\n  },\n}\n</script>\n\n<style lang=\"sass\"></style>\n"],"mappings":"AA4OA;EACAA,IAAA;EACAC,IAAA,EAAAA,CAAA;IACA;EAAA,CACA;EACAC,QAAA;IACA,KAAAC,SAAA;MACA,KAAAC,WAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAD,WAAA;EACA;AACA","ignoreList":[]}]}